# Пользователь вводит строку из четырёх 
# или более целых чисел, разделённых символом “/”. 
# Сформируйте словарь, где:
# второе и третье число являются ключами.
# первое число является значением для первого ключа.
# четвертое и все возможные последующие числа 
#        хранятся в кортеже как значения второго ключа.
       
       a, b, c, *d = [int(i) for i in input().split('/')]
my_dict = {}
my_dict[b] = a
my_dict[c] = d
print(my_dict)

# Самостоятельно сохраните в переменной строку текста. 
# Создайте из строки словарь, где ключ — буква, а значение — код буквы. 
# Напишите преобразование в одну строку.

string = 'Самостоятельно сохраните в переменной строку текста'
print({letter: ord(letter) for letter in string})

# Продолжаем развивать задачу 2. 
# Возьмите словарь, который вы получили. 
# Сохраните его итератор. 
# Далее выведите первые 5 пар ключ-значение, 
# обращаясь к итератору, а не к словарю.

my_iter = iter(my_dict.items())
for i in range(5):
    print(next(my_iter))
    
#     Создайте генератор чётных чисел от нуля до 100. 
# Из последовательности исключите 
# числа, сумма цифр которых равна 8. 
# Решение в одну строку

my_gen = (i for i in range (0, 101, 2) if i % 10 + i // 10 != 8)
for i in my_gen:
    print(i, end='\t')
    
#     Напишите программу, которая выводит 
# на экран числа от 1 до 100. 
# При этом вместо чисел, кратных трем, 
# программа должна выводить слово «Fizz»
# Вместо чисел, кратных пяти — слово «Buzz». 
# Если число кратно и 3, и 5, то программа 
# должна выводить слово «FizzBuzz».
# *Превратите решение в генераторное выражение.

my_iter = ('FizzBuzz' if i % 15 == 0 else
           'Fizz' if i % 3 == 0 else
           'Buzz' if i % 5 == 0 else i for i in range(1, 101))
for i in my_iter:
    print(i)
    
#     Создайте функцию-генератор. 
# Функция генерирует N простых чисел, 
# начиная с числа 2. 
# Для проверки числа на простоту используйте правило: «число является простым, если делится нацело только на единицу и на себя».

if num == 2 or num == 3:
    print(f"Число {num} простое")
elif num % 2 == 0:
    print(f"Число {num} составное")
else:
    for i in range(3, int(num**0.5)+2, 2):
        if num % i == 0:
            print(f"Число {num} составное")
            break
        else:
            flag = True
if flag:
    print(f"Число {num} простое")
    
    def check_num(num: int) -> bool:
    flag = False
    if num == 2 or num == 3:
        return True
    elif num % 2 == 0:
        return False
    else:
        for i in range(3, int(num**0.5)+2, 2):
            if num % i == 0:
                return False
            else:
                flag = True
    return flag

def gen_nums(n: int):
    count = 0
    i = 2
    while count < n:
        if check_num(i):
            count += 1
            yield i
        i += 1

for i in gen_nums(10):
    print(i, end=' ')
    
#     Выведите в консоль таблицу умножения 
# от 2х2 до 9х10 как на школьной тетрадке. 
# Таблицу создайте в виде однострочного генератора, где каждый элемент генератора — отдельный пример таблицы умножения. 
# Для вывода результата используйте «принт» 
# без перехода на новую строку.

my_table = (f'{j} * {i} = {j * i}\t' if j < 5 else f'{j} * {i} = {j * i}\n'
            for i in range(2, 11) for j in range(2, 6))
for i in my_table:
    print(i, end='')
print()
my_table = (f'{j} * {i} = {j * i}\t' if j < 9 else f'{j} * {i} = {j * i}\n'
            for i in range(2, 11) for j in range(6, 10))
for i in my_table:
    print(i, end='')
